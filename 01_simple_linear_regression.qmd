---
title: "Simple Linear Regression"
---

Linear regression is introduced in Chapter 1 with the motivating question:

> How much should you expect to pay for a used Honda Accord, if you know how many miles the car has already been driven?

and introduces the `AccordPrice` data set, which contains information about the list price and mileage for a sample of 30 Honda Accords. The `AccordPrice` data set is included with the `Stat2Data` R package, so to access the data for yourself, you'll need to install the package. If you don't already know how to install R packages, here are two good resources to walk you through the process:

- Reading: [ModernDive Chapter 1.3.1: Installing Packages](https://moderndive.com/1-getting-started.html#package-installation)
- Watching: [How to Install Packages in R Studio](https://www.youtube.com/watch?v=-wTcDqJWSzA) on YouTube

Once you have the package installed, load the package into your R session using:

```{r}
library(Stat2Data)
```

To load the `AccordPrice` data set into your R environment, use the command:

```{r}
data("AccordPrice")
```


```{r}
#| echo: false

AccordPrice
```

As a side note: not much information is given in the text about how this sample of 30 Accords was collected, but we can gather a bit more information by looking at the help page for the `AccordPrice` data set. To open the help page for the `AccordPrice` data set, you can run the command

```{r}
?AccordPrice
```

in the R console. By reading the "Details" and "Source" sections, we can learn that these 30 Accords were listed for sale on Cars.com in Lakewood Ohio during February 2017. Whenever you want to to know more about one of the textbook's data sets, the help page for that data set is a good place to look first. Sometimes there's not much more information than given in the textbook, but every little bit helps!

## Exploring the `AccordPrice` data set

Figure 1.2 displays a scatter plot of the `Mileage` and `Price` variable, showing how those variables relate to one another. To re-produce this scatter plot, we'll use the `ggplot2` R package [@ggplot2package]. If you're not already familiar with the `ggplot2` package, here are a few good resources to help you get started:

- Reading: [ModernDive Chapter 2: Data Visualization](https://moderndive.com/2-viz.html)
- Reading: [Effective data visualization](https://datasciencebook.ca/viz.html)
- Watching: [ggplot for plots and graphs](https://www.youtube.com/watch?v=HPJn1CMvtmI) on YouTube

To re-create this scatter plot, we'll map the `Mileage` variable to x-axis aesthetic, and the `Price` variable to the y-axis aesthetic, and draw a layer of points to represent each of the 30 cars using `geom_point()`

```{r}
#| message: false
library(ggplot2)

ggplot(data = AccordPrice,
       mapping = aes(x=Mileage, y=Price)
       ) +
  geom_point()
```

::: {.callout-aside}
If you want to **exactly** reproduce the scatter plots in STAT2, right down to the colors, backgrounds, and fonts, you can use the following ggplot2 theme:

```{r}
#| code-fold: true

theme_stat2 <- function(base_size = 11,
                        base_family = "",
                        base_line_size = base_size/22,
                        base_rect_size = base_size/22) {
  
  theme_bw() %+replace% 
  theme(axis.text.x = element_text(color="black"),
        axis.text.y = element_text(color="black"),
        panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.background=element_rect(colour="black"),
        complete = TRUE
        )
}

```

And use the hex color code #92278f for your geometric objects. For example, this could **exactly** reproduce Figure 1.2 by adapting the code above to use this new theme:

```{r price_mileage_scatter}
#| eval: false
#| code-fold: true

ggplot(data = AccordPrice,
       mapping = aes(x=Mileage, y=Price)
       ) +
  geom_point(color="#92278f") +
  theme_stat2()
```

In the rest of this book, we *won't* use the STAT2 theme for our visualizations, but provide it here for completeness.
:::

## Modeling the `Mileage` vs. `Price` relationsip

Example 1.3 shows a summary of a simple linear regression model fit to the `Mileage` and `Price` variable in the `AccordPrices` data set. This summary is actually a mix of two different summaries, a regression table and an Analysis of Variance (ANOVA) table. Reproducing this summary will be a 3 step process in R:

1. Fitting the model using the `lm()` function
2. Printing the regression table with the `summary()` function
3. Printing the ANOVA table with the `anova()` function

### Fitting a simple linear regression model

The `lm()` function (short for **l**inear **m**odel) does the "heavy lifting' of estimating the coefficients of the simple linear model. In other words, the `lm()` function find the optimal values for $\hat{\beta_0}$ and $\hat{\beta_1}$ in the model $Price = \hat{\beta_0} + \hat{\beta_1} \cdot Mileage + \epsilon$.

To fit a linear regression model using `lm`, you need to supply:

1. A formula describing relationship between the outcome and explanatory variable(s)
2. The name of a data set where the outcome and explanatory variables can be found.

In this case, our call to the `lm` function would be:

```{r price_mileage_model}
price_mileage_model <- lm(Price ~ Mileage, data = AccordPrice)
```

The first argument inside the `lm()` function is the formula describing the structure of the model. In R, model formulas are always created using the `~` symbol, with the outcome variable named on the left, and the explanatory variables(s) named on the right. As you might notice, R's model formula code is an adaptation of  how the model is described in mathematical notation.

Also, take note that we've saved the results from fitting this linear model in a new R object named `price_mileage_model`. We'll need to use this new object to produce the regression table and the ANOVA table in steps 2 and 3 below.

### Reporting the regression table

In order to report the regression table, we need to call the `summary()` function on the linear model object we just created:

```{r}
<<price_mileage_model>>
summary(price_mileage_model)
```

As we can see, the `summary()` function first prints out a few things *not* shown as part of the summary in the textbook: a copy of the code used to fit the model, and a the [Five-number summary](https://en.wikipedia.org/wiki/Five-number_summary) of the model's residual errors. These are followed by the regression table summarizing the intercept and slope, and a "goodness of fit" summary of the model as whole.

### Reporting the ANOVA table

The ANOVA table is found by calling the aptly named `anova()` function on the linear model, the same way we just did with the summary() function a moment ago:

```{r}
#| df-print: default
#| eval: false
<<price_mileage_model>>
anova(price_mileage_model)
```

```{r}
#| echo: false
anova_table <- capture.output(anova(price_mileage_model))
cat(anova_table, sep="\n")
```

## Adding the regression line to a scatterplot

Figure 1.3 shows the Price vs. Mileage scatter plot again, but this time with a line representing the regression model's predictions drawn on top of the raw data. Surprisingly, the easiest method for visualizing the predictions of a regression model **doesn't** involve the fitted model object. Instead, we will begin with the same ggplot code we used to draw the Mileage vs. Price scatter plot earlier, and add to it. The `geom_smooth()` function is used to draw the regression line on top of the raw data:

```{r}
ggplot(data = AccordPrice,
       mapping = aes(x = Mileage, y = Price)
       ) +
  geom_point() +
  geom_smooth(method = lm, se = FALSE, formula = y~x)
```

`geom_smooth()` is a generic smoothing function: the key argument that tells it to fit and display a linear 
regression model is the `method = lm` argument. Without the `method=lm` argument, `geom_smooth()` will not display a linear model.

The `se = FALSE` argument is included to stop ggplot from drawing confidence interval bands around the regression line. And, the `formula = y~x` argument is included simply to prevent ggplot from printing an annoying message that says <span style="font-color="red><code>`geom_smooth()` using formula 'y ~ x'</code></span> when creating the plot.